global
  log /dev/log  local0
  log /dev/log  local1 notice
  chroot /var/lib/haproxy
  stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
  stats timeout 30s
  user haproxy
  group haproxy
  daemon

  # Default SSL material locations
  ca-base /etc/ssl/certs
  crt-base /etc/ssl/private

  # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
  ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
  ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
  ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
  log  global
  mode  http
  option  httplog
  option  dontlognull
  timeout connect 5000
  timeout client  50000
  timeout server  50000
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http

resolvers dns
  nameserver dns1 1.1.1.1:53
  nameserver dns2 1.0.0.1:53
  hold valid 10s

# frontend stats
frontend stats
  mode http
  bind 127.0.0.1:8404
  stats enable
  stats uri /stats

# frontends master
frontend openshift-api-server
  bind *:6443
  default_backend be_openshift_api_server
  mode tcp
  option tcplog

frontend machine-config-server
  bind *:22623
  default_backend be_machine_config_server
  mode tcp
  option tcplog

# frontend worker
frontend ingress-http
  bind *:80
  default_backend be_ingress_http
  mode tcp
  option tcplog

frontend ingress-https
  bind *:443
  default_backend be_ingress_https
  mode tcp
  option tcplog

# backends master
backend be_openshift_api_server
  balance source
  mode tcp
{% for host in groups['master'] %}
  server {{ hostvars[host].inventory_hostname.split('.')[0] }} {{ hostvars[host].inventory_hostname }}:6443 resolvers dns check inter 1000
{% endfor %}
{% if (bootstrap_enabled is not defined) or (bootstrap_enabled is defined and not bootstrap_enabled | bool) %}
{% for host in groups['bootstrap'] %}
  server {{ hostvars[host].inventory_hostname.split('.')[0] }} {{ hostvars[host].inventory_hostname }}:6443 resolvers dns check inter 1000
{% endfor %}
{% endif %}

backend be_machine_config_server
  balance source
  mode tcp
{% for host in groups['master'] %}
  server {{ hostvars[host].inventory_hostname.split('.')[0] }} {{ hostvars[host].inventory_hostname }}:22623 resolvers dns check inter 1000
{% endfor %}
{% if (bootstrap_enabled is not defined) or (bootstrap_enabled is defined and not bootstrap_enabled | bool) %}
{% for host in groups['bootstrap'] %}
  server {{ hostvars[host].inventory_hostname.split('.')[0] }} {{ hostvars[host].inventory_hostname }}:22623 resolvers dns check inter 1000
{% endfor %}
{% endif %}

# backend worker
backend be_ingress_http
  balance source
  mode tcp
{% for host in groups['worker'] %}
  server {{ hostvars[host].inventory_hostname.split('.')[0] }} {{ hostvars[host].inventory_hostname }}:80 resolvers dns check inter 1000
{% endfor %}
{% if (bootstrap_enabled is not defined) or (bootstrap_enabled is defined and not bootstrap_enabled | bool) %}
{% for host in groups['master'] %}
  server {{ hostvars[host].inventory_hostname.split('.')[0] }} {{ hostvars[host].inventory_hostname }}:80 resolvers dns check inter 1000
{% endfor %}
{% endif %}

backend be_ingress_https
  balance source
  mode tcp
{% for host in groups['worker'] %}
  server {{ hostvars[host].inventory_hostname.split('.')[0] }} {{ hostvars[host].inventory_hostname }}:443 resolvers dns check inter 1000
{% endfor %}
{% if (bootstrap_enabled is not defined) or (bootstrap_enabled is defined and not bootstrap_enabled | bool) %}
{% for host in groups['master'] %}
  server {{ hostvars[host].inventory_hostname.split('.')[0] }} {{ hostvars[host].inventory_hostname }}:443 resolvers dns check inter 1000
{% endfor %}
{% endif %}
